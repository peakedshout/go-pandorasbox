package quicconn

import "fmt"

//Crypto Name: aes-256-gcm
//salt (len 4096):
//b9655c444c1d4e5e90db2e128904ac7b52c470318a08472b9bc6fc119340590ee544150f28e0469c9bf5f19d6c3e9b241bf80f03399f44008bdd97bd839d4760dfe6bef17062459b92dcadd071ce55e2b2287f2652ab4029ae2622edfe7db5bda678e825b9a84328b2ebd22728b9e59d6c3cf417f7c2453399c8d91f4e5df829d7a1d994b5ca4a849c544f3035503331d9334a2f44814a0e97a70329d7c1a79f01e3e0329c724217a13d7a55c13f21192685a191f6fe4861b2cefd283591dee38385700ef7dc404a8413718763a5f64d63178ecdea3342f4b5b9fdffd92090453f6052385720425b8dbe15fe60ef2a4ea8688fdd697340339562b11395726b436b2d50657b9b4370bc855bea34784d3aecdae3160f8b4b1684c6f10c1b3e150b224fd35343e54a1d9607bd4a7129d2174b1d64562c65416ebfb3665790a671a695f732073a3c494284a0567b7094173f1b7e90f53d064344a0c57591d2726245b7ca63ddaad64000adbdb6055a7863b9a77392eaf37e48ecadbac84299761ce136a9c4591a67438eadd2a87aa4bd1399411bc1d7e0a3401bb37da7abcc07a684148572e2909a4a668d2fc7655beee9bdf73b2cdfc2414f9da9b16f27d47fa14d0bc0f23100b5413fbe35ad1e483e8d4d9cc5d0a6029d4b879f1f1de334153ad159daa2db2e244f3bb07233a7eaa4480015f81948c1f5474e9cb1337def990ccdf21abb9d0bee4574a6256ec3860a86b128673135cf4d49e88832e9391259518da8b3501bcf334ace84adc3fbc4341a1a1ac4d02e9cd64833928464941caa857c1327a650cce24ff0a0ab7ced6c384e024bd4429145d14673bc5aec2e9023210cf2259dd3537b418883fbd0f31e17dd5e9e7339dfa4ce40099f43ec8e40d5bbf7acfc7b40c7f14c7db7294c3582363428de707b65edf346558b6e231b7aac15bc44117133b81346348198e61c03b86a1bd242730a1ce84104b4eea66375021666b38594e3d68248edaf6f154779b26576930a1184f442412eb549d6b90af7470e6de4ddf3679e4baa955a0c2dac791e84bedf8e2b77c44e4ab614de2293ec812c287bc16e4ce24da580c331785136c3cea70f787f848c4bd3bc3901c20d30eaefc8986657b999499ba1bdd480e53c96f6b6594ff69d004002a1c085421548005f9859be7c098243b485a76b25a504eb92f4001431a556446cb6cfa1f7c95dc818dab40fd7e9b64681902d2c929b1a6eaf73a9963afc564b4597244aac19f29a52ae15caa849bf448a880467b5c4b5f3bf4941ebb4a81241e28e436e39977bccdaf9af5e7fb16c43b18ee818da739591b5cdd0d66e1e974fb7973857fa0390530dec85ade3d568459ca388f7b40fe3ec1bb375f5333d2343119571a7225c15edc25451bf1d7d124ade8b68aa4d2761662676e1c17984db4a3da8f2ec16c668933596ce39ec31914b2c9c7399b212b975451e9803fa023c49019a0ea343ae473eb0fc286ac273e5493881a95bed3d7ea22ecc62f698b08d460384b952d044ac168a74dfcd062e224ab68d8de35f6cc60ae4a4ad5b1af39842d183cb4a78be125e150531fdf1097d4c53a673282fc76513906b27ceb047874a28822d8d1ec58853a02ef140ec1cb249efa9b5020e19278afc58ab5e915a5348f6a7b0a8bcb3b9cb16bcca4ebef7fd466989389fb909ea9dce104bc405660641b48a634c0ef3df1cd0a3b4c6b1cab745e6a520c8191b4501413ad450078130444d87d3c0b2e7a7d17468a90a9498be465ab85b99de40d572862a1a0ee79dc145ffa277644b87316fb47074b5362d464f328f98602340c2949ab2f54f7cf6054f9298347c057d25923a1a4a86244efd4f128f35007bcde13f9612fc4d7d606f46f3b1a20dd7a2907690732eb550bb7641b688ad7cd1e2390c8fa3c290e88a834ca285c7ed436a0e073769d68937588a40eb8b2c1a19697ddee1f92261dace4f496e901169d019c9a1b1e6e54b1329ba42ec91d3022b396b8e930cb84637a1ba4b949d55f6972b78d5ac383235ebe8504122b8cb5d364dd8098fe92a1de19859437894cc853016060f56107cac19365a46b5bb83cc82afe20b36a343e48213ce45e99a257c2cca5bbb47e3b22337609744b7b224726bd21c02abb21d79376f8e41248aff87cc3cf73334bd7d4adc9b3d4ef4b66208a8e81e6627ed2fc85086dc43e1bc6495b8232d65fb97f374772f854fc38d66f9f65e247b727870bb5052884a4cb803bf549b955ca48ebc385b13694fa0b32021bf861db1230249f38796a643bdb120e43553d5cd1fa7b311876f83442ea0777a1e86a7c58d1f75f00d374a4002b2bb6042bb3edc1184b397c1e2cb4364a689b523f0c0fc8061e6facfaeee4f6099881f756665db8409142c402e5143d8ba074a4330bab8ee230bd367c87348b48ce6399fcc5aaaf3204bfe1126e546c7b82da8d6f9d42dfb569cd1553bfc45ed9af52660558142de6b4bac4423cc4884848cb1dc6177789cdc1151393db844f1b1e572888951ff72f5a1aba8f2e549b1a8b70923e70d9de20e9a23b26bf74598adf4a746d5ee758a4af5db55e6f9409b828d6145dab308eaaaf2029184ad4b259e6841d785e18583046fe8272d584212bedfd13198d9f6aa8c97bcc50ba74552941768fb06acf7e7a7b592e3059545b2b9efb91ad67e86b102858238bb4749dfbf24d0fcc3a786d2e67e590d34734080914c437018f5aa6065fe6b502c0647b49353c880170238a8a2d2bbc44bc3453e8f4dc1ec4157bb859de3a4a60a7948c6b4dd0ff822fbe7851bf6451f6bed4610ad6b53496d2fb69e614fe07df7e04a02beb124bc61328dc7b713394c98dd475ab9ebd975511bcfd910c71a297ff44fd69b65509b8eb5fc2b
//key len: 32
//key:
//[208 , 65 , 92 , 236 , 160 , 202 , 12 , 255 , 98 , 190 , 231 , 4 , 103 , 124 , 105 , 136 , 239 , 191 , 125 , 241 , 230 , 85 , 116 , 131 , 118 , 229 , 187 , 213 , 236 , 24 , 210 , 72 ,]
//data (time.Now().Unix()):
//1700326207
//body len: 10
//encrypt len: 38
//decrypt len: 10
//over (time.Now().Unix()):
//1700326207

var (
	_genKey = []byte{208, 65, 92, 236, 160, 202, 12, 255, 98, 190, 231, 4, 103, 124, 105, 136, 239, 191, 125, 241, 230, 85, 116, 131, 118, 229, 187, 213, 236, 24, 210, 72}
)

const (
	_genKeyLen  = 32
	_bodylen    = 10
	_encryptlen = 38
	_decryptlen = _encryptlen
)

func init() {
	if len(_genKey) != _genKeyLen {
		panic(fmt.Sprintf("genKey len is not %d", _genKeyLen))
	}
}
